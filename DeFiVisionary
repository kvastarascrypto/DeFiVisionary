import requests
import pandas as pd
import matplotlib.pyplot as plt

class DeFiVisionary:
    def __init__(self, base_url='https://api.coingecko.com/api/v3'):
        self.base_url = base_url
        self.data = {}

    def fetch_defi_data(self, protocol_id: str, vs_currency: str = 'usd', days: int = 30) -> str:
        endpoint = f'{self.base_url}/coins/{protocol_id}/market_chart'
        params = {
            'vs_currency': vs_currency,
            'days': days
        }
        response = requests.get(endpoint, params=params)
        if response.status_code == 200:
            self.data[protocol_id] = response.json()
            return f"Market data for {protocol_id} fetched successfully."
        else:
            return f"Failed to fetch data: {response.status_code} - {response.text}"

    def get_historical_prices(self, protocol_id: str) -> pd.DataFrame:
        if protocol_id not in self.data:
            return pd.DataFrame()
        prices = self.data[protocol_id]['prices']
        df = pd.DataFrame(prices, columns=['timestamp', 'price'])
        df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
        return df

    def get_historical_volumes(self, protocol_id: str) -> pd.DataFrame:
        if protocol_id not in self.data:
            return pd.DataFrame()
        volumes = self.data[protocol_id]['total_volumes']
        df = pd.DataFrame(volumes, columns=['timestamp', 'volume'])
        df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
        return df

    def get_market_caps(self, protocol_id: str) -> pd.DataFrame:
        if protocol_id not in self.data:
            return pd.DataFrame()
        market_caps = self.data[protocol_id]['market_caps']
        df = pd.DataFrame(market_caps, columns=['timestamp', 'market_cap'])
        df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
        return df

    def plot_price_trends(self, protocol_id: str):
        df = self.get_historical_prices(protocol_id)
        if df.empty:
            print("No data available to plot.")
            return
        plt.figure(figsize=(12, 6))
        plt.plot(df['timestamp'], df['price'], label='Price')
        plt.title(f'{protocol_id.capitalize()} Price Trends')
        plt.xlabel('Date')
        plt.ylabel('Price (USD)')
        plt.legend()
        plt.show()

    def plot_volume_trends(self, protocol_id: str):
        df = self.get_historical_volumes(protocol_id)
        if df.empty:
            print("No data available to plot.")
            return
        plt.figure(figsize=(12, 6))
        plt.plot(df['timestamp'], df['volume'], label='Volume', color='orange')
        plt.title(f'{protocol_id.capitalize()} Volume Trends')
        plt.xlabel('Date')
        plt.ylabel('Volume')
        plt.legend()
        plt.show()

    def plot_market_cap_trends(self, protocol_id: str):
        df = self.get_market_caps(protocol_id)
        if df.empty:
            print("No data available to plot.")
            return
        plt.figure(figsize=(12, 6))
        plt.plot(df['timestamp'], df['market_cap'], label='Market Cap', color='green')
        plt.title(f'{protocol_id.capitalize()} Market Cap Trends')
        plt.xlabel('Date')
        plt.ylabel('Market Cap (USD)')
        plt.legend()
        plt.show()

    def fetch_tvl_data(self, protocol_id: str) -> str:
        endpoint = f'https://api.llama.fi/protocol/{protocol_id}'
        response = requests.get(endpoint)
        if response.status_code == 200:
            self.data[f'{protocol_id}_tvl'] = response.json()
            return f"TVL data for {protocol_id} fetched successfully."
        else:
            return f"Failed to fetch TVL
